#ifndef _FIELDINFO__H_
#define _FIELDINFO__H_

#include "GlobalConstants.h"
#include "JavaClassConstants.h"
#include "JavaString.h"

enum class e_JavaFieldAccessFlags : uint16_t
{
  Public = 0x01       // Accessible outside the package
  , Private = 0x2       // Only accessible in the defining class
  , Protected = 0x4     // May be accessed within subclasses
  , Static = 0x8        // static
  , Final = 0x10        // Must not be overridden
  , Volatile = 0x40     // Can not be cached
  , Transient = 0x80    // Not written or read to by a persistent object manager
  , Synthetic = 0x1000  // Generated by the compiler. Does not appear in the source.
  , Enum = 0x4000       // Declared as part of an enum
};

class FieldInfo
{
public:
  FieldInfo( const ConstantPool &pPool, uint16_t flags, boost::intrusive_ptr<JavaString> name, boost::intrusive_ptr<JavaString> descriptor, CodeAttributeList attributes, intptr_t offset );

  FieldInfo( const FieldInfo &other );
  FieldInfo( FieldInfo &&other );

  virtual ~FieldInfo() JVMX_NOEXCEPT {};

  FieldInfo operator=( FieldInfo other ) JVMX_NOEXCEPT;

  uint16_t GetFlags() const JVMX_NOEXCEPT;
  boost::intrusive_ptr<JavaString> GetName() const;
  boost::intrusive_ptr<JavaString> GetType() const;
  virtual size_t GetOffset() const;
  const CodeAttributeList &GetAttributes() const;

  virtual size_t GetByteSize() const;

  static void swap( FieldInfo &left, FieldInfo &right ) JVMX_NOEXCEPT;
  bool IsStatic() const JVMX_NOEXCEPT;
  virtual bool IsFinal() const JVMX_NOEXCEPT;
  virtual bool IsProtected() const JVMX_NOEXCEPT;
  virtual bool IsPublic() const JVMX_NOEXCEPT;

  virtual ConstantPoolIndex GetConstantValueIndex() const; // Use this on static fields.
  virtual void SetStaticValue( boost::intrusive_ptr<IJavaVariableType> pValue );
  virtual void SetStaticValue( IJavaVariableType *pValue ) JVMX_FN_DELETE;
  virtual boost::intrusive_ptr<IJavaVariableType> GetStaticValue() const;

  void Prepare();

private:
  //uint16_t m_Flags;

  struct FlagBits
  {
    uint16_t flagPublic : 1;
    uint16_t flagPrivate : 1;
    uint16_t flagProtected : 1;
    uint16_t flagStatic : 1;
    uint16_t flagFinal : 1;
    uint16_t flagReserved1 : 1; //0x20
    uint16_t flagVolatile : 1;
    uint16_t flagTransient : 1; //0x80
    uint16_t flagReserved2 : 1; //0x100
    uint16_t flagReserved3 : 1; //0x200
    uint16_t flagReserved4 : 1; //0x400
    uint16_t flagReserved5 : 1; //0x800
    uint16_t flagSynthetic : 1; //0x1000
    uint16_t flagReserved6 : 1; //0x2000
    uint16_t flagEnum : 1;      //0x4000
    uint16_t flagReserved7 : 1; //0x8000
  };

  union
  {
    uint16_t m_FlagsAsInt;
    FlagBits m_FlagsAsBits;
  } m_Flags;

  boost::intrusive_ptr<JavaString> m_Name;
  boost::intrusive_ptr<JavaString> m_Descriptor;
  CodeAttributeList m_Attributes;

  boost::intrusive_ptr<IJavaVariableType> m_pStaticValue;
  bool m_Prepared;

  size_t m_Offset;
};

typedef std::vector<std::shared_ptr<FieldInfo> > FieldInfoList;

#endif // _FIELDINFO__H_
